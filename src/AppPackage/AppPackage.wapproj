<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Condition="'$(VisualStudioVersion)' == '' or '$(VisualStudioVersion)' &lt; '15.0'">
    <VisualStudioVersion>15.0</VisualStudioVersion>
  </PropertyGroup>
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="DebugPackaged|ARM64">
      <Configuration>DebugPackaged</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugPackaged|x64">
      <Configuration>DebugPackaged</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleasePackaged|ARM64">
      <Configuration>ReleasePackaged</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleasePackaged|x64">
      <Configuration>ReleasePackaged</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|ARM64">
      <Configuration>Debug</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|ARM64">
      <Configuration>Release</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Configuration">
    <BaseIntermediateOutputPath>$(SolutionDir)obj\$(Platform)\$(Configuration)\$(MSBuildProjectName)\</BaseIntermediateOutputPath>
    <OutputPath>$(SolutionDir)bin\$(Platform)\$(Configuration)\</OutputPath>
  </PropertyGroup>
  <PropertyGroup>
    <WapProjPath Condition="'$(WapProjPath)'==''">$(MSBuildExtensionsPath)\Microsoft\DesktopBridge\</WapProjPath>
    <AddAdditionalExplicitAssemblyReferences>false</AddAdditionalExplicitAssemblyReferences>
  </PropertyGroup>
  <Import Project="$(WapProjPath)\Microsoft.DesktopBridge.props" />
  <PropertyGroup>
    <ProjectGuid>e3aa150f-d6e7-44ab-b8d8-ef290c0889ef</ProjectGuid>
    <TargetPlatformVersion>10.0.22621.0</TargetPlatformVersion>
    <TargetPlatformMinVersion>10.0.18362.0</TargetPlatformMinVersion>
    <DefaultLanguage>en-US</DefaultLanguage>
    <DebuggerType>NativeOnly</DebuggerType>
    <GenerateAppInstallerFile>true</GenerateAppInstallerFile>
    <AppxPackageSigningTimestampDigestAlgorithm>SHA256</AppxPackageSigningTimestampDigestAlgorithm>
    <AppxBundle>Never</AppxBundle>
    <AppxBundlePlatforms>x64|arm64</AppxBundlePlatforms>
    <AppxAutoIncrementPackageRevision>false</AppxAutoIncrementPackageRevision>
    <GenerateTestArtifacts>false</GenerateTestArtifacts>
    <EntryPointProjectUniqueName>..\XamlIslandsCpp\XamlIslandsCpp.vcxproj</EntryPointProjectUniqueName>
    <IsDebug>$(Configuration.StartsWith('Debug'))</IsDebug>
    <IsPackaged>$(Configuration.EndsWith('Packaged'))</IsPackaged>
  </PropertyGroup>
  <PropertyGroup Condition="!Exists('AppPackage_TemporaryKey.pfx')">
    <AppxPackageSigningEnabled>false</AppxPackageSigningEnabled>
  </PropertyGroup>
  <PropertyGroup Condition="Exists('AppPackage_TemporaryKey.pfx')">
    <AppxPackageSigningEnabled>true</AppxPackageSigningEnabled>
    <PackageCertificateKeyFile>AppPackage_TemporaryKey.pfx</PackageCertificateKeyFile>
  </PropertyGroup>
  <Import Project="..\WinUI.targets" />
  <ItemGroup>
    <AppxManifest Include="Package.appxmanifest">
      <SubType>Designer</SubType>
    </AppxManifest>
  </ItemGroup>
  <ItemGroup>
    <None Include="AppPackage_TemporaryKey.pfx" />
    <Content Include="Images\SplashScreen.scale-200.png" />
    <Content Include="Images\LockScreenLogo.scale-200.png" />
    <Content Include="Images\Square150x150Logo.scale-200.png" />
    <Content Include="Images\Square44x44Logo.scale-200.png" />
    <Content Include="Images\Square44x44Logo.targetsize-24_altform-unplated.png" />
    <Content Include="Images\StoreLogo.png" />
    <Content Include="Images\Wide310x150Logo.scale-200.png" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\XamlIslandsCpp\XamlIslandsCpp.vcxproj" />
  </ItemGroup>
  <!-- 只支持 DebugPackaged 或 ReleasePackaged 配置打包 -->
  <Target Name="VerifyConfiguration" BeforeTargets="BeforeBuild">
    <Error Text="Unsupported configuration!" Condition="!$(Configuration.EndsWith('Packaged'))" />
  </Target>
  <!-- 由于 x-generate 不起作用，这个脚本用于检测支持的语言并填充 Resources 节点 -->
  <UsingTask TaskName="GenerateResourcesNode" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <ManifestPath Required="true" />
      <TargetPath Required="true" />
      <ResourcesDir Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Xml" />
      <Code Type="Fragment" Language="cs"><![CDATA[
XmlDocument doc = new();
doc.Load(ManifestPath);

XmlElement resourcesNode = doc.DocumentElement["Resources"];

const string PREFIX = "Resources.language-";
const string SUFFIX = ".resw";

foreach (string filePath in Directory.GetFiles(ResourcesDir)) {
    string fileName = Path.GetFileName(filePath);

    if (!fileName.StartsWith(PREFIX) || !fileName.EndsWith(SUFFIX)) {
        continue;
    }

    string tag = fileName.Substring(PREFIX.Length, fileName.Length - PREFIX.Length - SUFFIX.Length).ToUpper();

    XmlElement resourceNode = doc.CreateElement("Resource", resourcesNode.NamespaceURI);
    resourceNode.SetAttribute("Language", tag);
    resourcesNode.AppendChild(resourceNode);
}

doc.Save(TargetPath);
      ]]></Code>
    </Task>
  </UsingTask>
  <Target Name="GenerateResourcesNodeForAppxManifest" BeforeTargets="ResolveProjectReferences">
    <MakeDir Directories="$(BaseIntermediateOutputPath)" />
    <GenerateResourcesNode ManifestPath="@(AppxManifest)" TargetPath="$(BaseIntermediateOutputPath)Package.appxmanifest" ResourcesDir="..\XamlIslandsCpp\" />
    <ItemGroup>
      <AppxManifest Remove="@(AppxManifest)" />
      <AppxManifest Include="$(BaseIntermediateOutputPath)Package.appxmanifest" />
    </ItemGroup>
  </Target>
  <!-- 将依赖项移到包的根目录 -->
  <!-- https://github.com/microsoft/terminal/blob/a2bb3136bb52c253060aa281396dbd12316b33a6/src/cascadia/CascadiaPackage/CascadiaPackage.wapproj#L100 -->
  <Target Name="FlattenPackage" BeforeTargets="_ConvertItems">
    <ItemGroup>
      <_TemporaryFilteredWapProjOutput Include="@(_FilteredNonWapProjProjectOutput)" />
      <_FilteredNonWapProjProjectOutput Remove="@(_TemporaryFilteredWapProjOutput)" />
      <_FilteredNonWapProjProjectOutput Include="@(_TemporaryFilteredWapProjOutput)">
        <!-- 清空 SourceProject 使依赖项位于包的根目录 -->
        <SourceProject />
      </_FilteredNonWapProjProjectOutput>
    </ItemGroup>
  </Target>
  <!-- 防止依赖项的 winmd 和 pri 被复制到包中。应尽可能晚的移除 winmd，我们需要编译系统将其中的可激活类记录到 AppxManifest.xml -->
  <Target Name="RemoveWinMDAndPri" BeforeTargets="_CalculateInputsForGenerateAppxPackageRecipe">
    <ItemGroup>
      <AppxPackagePayload Remove="@(AppxPackagePayload)" Condition="'%(Extension)' == '.winmd' Or ('%(Filename)' != 'resources' And '%(Extension)' == '.pri')" />
    </ItemGroup>
  </Target>
  <!-- 直接使用 resources.pri，其他的 pri 都已经合并 -->
  <Target Name="RemoveDupPris" AfterTargets="_RemoveExtraPriFiles">
    <ItemGroup>
      <_PriFile Remove="@(_PriFile)" Condition="'%(Filename)' != 'resources'" />
    </ItemGroup>
  </Target>
  <Import Project="$(WapProjPath)\Microsoft.DesktopBridge.targets" />
</Project>