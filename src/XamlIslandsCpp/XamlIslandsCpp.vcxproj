<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="..\..\packages\Microsoft.Windows.CppWinRT.2.0.240405.15\build\native\Microsoft.Windows.CppWinRT.props" Condition="Exists('..\..\packages\Microsoft.Windows.CppWinRT.2.0.240405.15\build\native\Microsoft.Windows.CppWinRT.props')" />
  <Import Project="..\..\packages\Microsoft.UI.Xaml.2.8.6\build\native\Microsoft.UI.Xaml.props" Condition="Exists('..\..\packages\Microsoft.UI.Xaml.2.8.6\build\native\Microsoft.UI.Xaml.props')" />
  <PropertyGroup Label="Globals">
    <CppWinRTGenerateWindowsMetadata>true</CppWinRTGenerateWindowsMetadata>
    <MinimalCoreWin>true</MinimalCoreWin>
    <ProjectGuid>{1239537c-e5b8-427a-9e7f-ea443d1f3529}</ProjectGuid>
    <ProjectName>XamlIslandsCpp</ProjectName>
    <RootNamespace>XamlIslandsCpp</RootNamespace>
    <MinimumVisualStudioVersion>17.0</MinimumVisualStudioVersion>
    <!-- 为了编译为 exe，AppContainerApplication 必须为 false，否则虽然可以编译但无法在 VS 中调试。 -->
    <!-- 这会导致不会自动生成 pri，稍后我们手动导入 Microsoft.AppXPackage.Targets 来解决这个问题。 -->
    <AppContainerApplication>false</AppContainerApplication>
    <ApplicationType>Windows Store</ApplicationType>
    <ApplicationTypeRevision>10.0</ApplicationTypeRevision>
    <WindowsTargetPlatformVersion Condition=" '$(WindowsTargetPlatformVersion)' == '' ">10.0.22621.0</WindowsTargetPlatformVersion>
    <WindowsTargetPlatformMinVersion>10.0.18362.0</WindowsTargetPlatformMinVersion>
    <IntDir>$(SolutionDir)obj\$(Platform)\$(Configuration)\$(MSBuildProjectName)\</IntDir>
    <OutDir>$(SolutionDir)bin\$(Platform)\$(Configuration)\</OutDir>
    <AppxBundlePlatforms>x64|arm64</AppxBundlePlatforms>
    <!-- 将 xbf 文件打包进 pri -->
    <!-- https://github.com/microsoft/terminal/blob/9eb191d5453fed890bad63952e425e1240aa8df5/src/cascadia/TerminalApp/TerminalAppLib.vcxproj#L17-L18 -->
    <DisableEmbeddedXbf>false</DisableEmbeddedXbf>
    <XamlComponentResourceLocation>nested</XamlComponentResourceLocation>
    <!-- 防止 xbf 被复制到输出文件夹 -->
    <GenerateLibraryLayout>true</GenerateLibraryLayout>
    <DesktopCompatible>true</DesktopCompatible>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="DebugPackaged|ARM64">
      <Configuration>DebugPackaged</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugPackaged|x64">
      <Configuration>DebugPackaged</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|ARM64">
      <Configuration>Debug</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleasePackaged|ARM64">
      <Configuration>ReleasePackaged</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleasePackaged|x64">
      <Configuration>ReleasePackaged</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|ARM64">
      <Configuration>Release</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <PlatformToolset>v143</PlatformToolset>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)'=='Debug'" Label="Configuration">
    <UseDebugLibraries>true</UseDebugLibraries>
    <LinkIncremental>true</LinkIncremental>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)'=='DebugPackaged'" Label="Configuration">
    <UseDebugLibraries>true</UseDebugLibraries>
    <LinkIncremental>true</LinkIncremental>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)'=='Release'" Label="Configuration">
    <UseDebugLibraries>false</UseDebugLibraries>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <LinkIncremental>false</LinkIncremental>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)'=='ReleasePackaged'" Label="Configuration">
    <UseDebugLibraries>false</UseDebugLibraries>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <LinkIncremental>false</LinkIncremental>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="..\Solution.props" />
    <Import Project="..\WinUI.targets" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets">
    <Import Project="$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformExtensionSDKLocation(`WindowsDesktop, Version=10.0.22621.0`, $(TargetPlatformIdentifier), $(TargetPlatformVersion),  $(SDKReferenceDirectoryRoot), $(SDKExtensionDirectoryRoot), $(SDKReferenceRegistryRoot)))\DesignTime\CommonConfiguration\Neutral\WindowsDesktop.props" Condition="exists('$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformExtensionSDKLocation(`WindowsDesktop, Version=10.0.22621.0`, $(TargetPlatformIdentifier), $(TargetPlatformVersion),  $(SDKReferenceDirectoryRoot), $(SDKExtensionDirectoryRoot), $(SDKReferenceRegistryRoot)))\DesignTime\CommonConfiguration\Neutral\WindowsDesktop.props')" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <ItemDefinitionGroup>
    <ClCompile>
      <!-- 删除用于 XAML 设计器的几个导出函数，编译为 exe 不需要它们。 -->
      <!-- 另外这些导出函数不支持 ARM64，所以即使编译为 dll 也应禁用它们，然后自己导出 DllGetActivationFactory。 -->
      <PreprocessorDefinitions>_VSDESIGNER_DONT_LOAD_AS_DLL;DISABLE_XAML_GENERATED_MAIN;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <GenerateWindowsMetadata>false</GenerateWindowsMetadata>
      <SubSystem>Windows</SubSystem>
      <AdditionalDependencies>gdi32.lib;Dwmapi.lib;Shell32.lib;UxTheme.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClInclude Include="AppSettings.h" />
    <ClInclude Include="CaptionButtonsControl.h">
      <DependentUpon>CaptionButtonsControl.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClInclude>
    <ClInclude Include="CommonSharedConstants.h" />
    <ClInclude Include="MainWindow.h" />
    <ClInclude Include="RootPage.h">
      <DependentUpon>RootPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClInclude>
    <ClInclude Include="pch.h" />
    <ClInclude Include="App.h">
      <DependentUpon>App.xaml</DependentUpon>
    </ClInclude>
    <ClInclude Include="ThemeHelper.h" />
    <ClInclude Include="TitleBarControl.h">
      <DependentUpon>TitleBarControl.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClInclude>
    <ClInclude Include="Win32Helper.h" />
    <ClInclude Include="WinRTHelper.h" />
    <ClInclude Include="XamlHelper.h" />
    <ClInclude Include="XamlWindow.h" />
  </ItemGroup>
  <ItemGroup>
    <ApplicationDefinition Include="App.xaml">
      <SubType>Designer</SubType>
    </ApplicationDefinition>
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="AppSettings.cpp" />
    <ClCompile Include="CaptionButtonsControl.cpp">
      <DependentUpon>CaptionButtonsControl.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClCompile>
    <ClCompile Include="main.cpp" />
    <ClCompile Include="MainWindow.cpp" />
    <ClCompile Include="RootPage.cpp">
      <DependentUpon>RootPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClCompile>
    <ClCompile Include="pch.cpp">
      <PrecompiledHeader>Create</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include="App.cpp">
      <DependentUpon>App.xaml</DependentUpon>
    </ClCompile>
    <ClCompile Include="$(GeneratedFilesDir)module.g.cpp" />
    <ClCompile Include="ThemeHelper.cpp" />
    <ClCompile Include="TitleBarControl.cpp">
      <DependentUpon>TitleBarControl.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClCompile>
    <ClCompile Include="Win32Helper.cpp" />
    <ClCompile Include="XamlHelper.cpp" />
  </ItemGroup>
  <ItemGroup>
    <Midl Include="App.idl">
      <DependentUpon>App.xaml</DependentUpon>
    </Midl>
    <None Include="CaptionButtonsControl.idl">
      <DependentUpon>CaptionButtonsControl.xaml</DependentUpon>
      <SubType>Code</SubType>
    </None>
    <None Include="RootPage.idl">
      <DependentUpon>RootPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </None>
    <None Include="TitleBarControl.idl">
      <DependentUpon>TitleBarControl.xaml</DependentUpon>
      <SubType>Code</SubType>
    </None>
  </ItemGroup>
  <ItemGroup>
    <None Include="packages.config" />
  </ItemGroup>
  <ItemGroup>
    <Page Include="CaptionButtonsControl.xaml">
      <SubType>Designer</SubType>
    </Page>
    <Page Include="RootPage.xaml">
      <SubType>Designer</SubType>
    </Page>
    <Page Include="TitleBarControl.xaml">
      <SubType>Designer</SubType>
    </Page>
  </ItemGroup>
  <ItemGroup>
    <SDKReference Include="WindowsDesktop, Version=10.0.22621.0" />
  </ItemGroup>
  <ItemGroup>
    <PRIResource Include="Resources.language-en-US.resw" />
    <PRIResource Include="Resources.language-zh-CN.resw" />
  </ItemGroup>
  <ItemGroup>
    <Manifest Include="app.manifest" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <!-- 导入 Microsoft.AppXPackage.Targets 以生成 pri，应在 Microsoft.Cpp.targets 之后 -->
  <Import Project="$(MsAppxPackageTargets)" />
  <!-- 防止 xbf 被复制到子文件夹 -->
  <Target Name="AddProcessedXamlFilesToCopyLocal" />
  <!-- resources.pri 中 App.xbf 必须是 Files 的根节点，否则程序将无法运行 -->
  <!-- https://github.com/microsoft/terminal/blob/a2bb3136bb52c253060aa281396dbd12316b33a6/src/cascadia/TerminalApp/TerminalAppLib.vcxproj#L458 -->
  <Target Name="PlaceAppXbfAtRootOfResourceTree" AfterTargets="GetPackagingOutputs">
    <ItemGroup>
      <_RelocatedAppXamlData Include="@(PackagingOutputs)" Condition="'%(Filename)' == 'App' and ('%(Extension)' == '.xaml' or '%(Extension)' == '.xbf')" />
      <PackagingOutputs Remove="@(_RelocatedAppXamlData)" />
      <PackagingOutputs Include="@(_RelocatedAppXamlData)">
        <TargetPath>%(Filename)%(Extension)</TargetPath>
      </PackagingOutputs>
    </ItemGroup>
  </Target>
  <!-- 编译为非打包应用时应自行生成 resources.pri -->
  <UsingTask TaskName="MakeResourcesPriTask" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <WindowsSDKDir Required="true" />
      <OutDir Required="true" />
      <PriPaths Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Diagnostics" />
      <Code Type="Fragment" Language="cs"><![CDATA[
string windowsSdkDir = WindowsSDKDir.Split(';')[0];
string makepriPath = Path.Combine(windowsSdkDir, "makepri.exe");
if (!File.Exists(makepriPath)) {
    throw new Exception("未找到 makepri");
}

Directory.SetCurrentDirectory(OutDir);

// 创建配置文件合并输入的 pri
using (StreamWriter priConfig = File.CreateText("priconfig.xml")) {
    priConfig.WriteLine("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
    priConfig.WriteLine("<resources targetOsVersion=\"10.0.0\" majorVersion=\"1\">");
    
    foreach (string priPath in PriPaths.Split(';')) {
        priConfig.WriteLine($"  <index root=\"\\\" startIndexAt=\"{priPath}\">");
        priConfig.WriteLine("""
      <default>
        <qualifier name="Language" value="en-US" />
        <qualifier name="Contrast" value="standard" />
        <qualifier name="Scale" value="200" />
        <qualifier name="HomeRegion" value="001" />
        <qualifier name="TargetSize" value="256" />
        <qualifier name="LayoutDirection" value="LTR" />
        <qualifier name="DXFeatureLevel" value="DX9" />
        <qualifier name="Configuration" value="" />
        <qualifier name="AlternateForm" value="" />
        <qualifier name="Platform" value="UAP" />
      </default>
      <indexer-config type="PRI" />
      <indexer-config type="RESFILES" qualifierDelimiter="." />
    </index>
  """);
    }
    
    priConfig.WriteLine("</resources>");
}

// 调用 makepri 生成 resources.pri
Process p = Process.Start(new ProcessStartInfo {
    FileName = makepriPath,
    Arguments = "New /pr . /cf priconfig.xml /of resources.pri /o",
    WorkingDirectory = OutDir,
    UseShellExecute = false
});
p.WaitForExit();

if (p.ExitCode != 0) {
    throw new Exception("生成 resources.pri 失败");
}

File.Delete("priconfig.xml");
      ]]></Code>
    </Task>
  </UsingTask>
  <Target Name="MakeResourcesPri" AfterTargets="_GenerateProjectPriFileCore" Condition="!$(IsPackaged)">
    <ItemGroup>
      <_PrisToMerge Include="@(PackagingOutputs)" Condition="'%(Extension)' == '.pri'" KeepMetadata="DoesntExist" />
    </ItemGroup>
    <MakeResourcesPriTask WindowsSDKDir="$(WindowsSDK_ExecutablePath_x64)" OutDir="$(OutDir)" PriPaths="@(_PrisToMerge)" />
    <ItemGroup>
      <!-- 删除 resources.pri 后应触发重新编译 -->
      <FileWrites Include="$(OutDir)resources.pri" />
    </ItemGroup>
  </Target>
  <PropertyGroup>
    <_ManifestsDir>$(IntDir)Manifests\</_ManifestsDir>
  </PropertyGroup>
  <!-- 编译为非打包应用时向清单文件添加运行时使用到的 WinRT 组件 -->
  <!-- Reg-free WinRT: https://blogs.windows.com/windowsdeveloper/2019/04/30/enhancing-non-packaged-desktop-apps-using-windows-runtime-components/ -->
  <!-- 来自 https://github.com/microsoft/terminal/blob/a2bb3136bb52c253060aa281396dbd12316b33a6/build/rules/GenerateSxsManifestsFromWinmds.targets -->
  <Target Name="UnpackagedWin32MapWinmdsToManifestFiles" DependsOnTargets="ResolveAssemblyReferences" Condition="!$(IsPackaged)">
    <ItemGroup>
      <!-- 为每一个引用的非系统 winmd 文件 (除了 Microsoft.Web.WebView2.Core) 生成清单文件 -->
      <_UnpackagedWin32WinmdManifest Include="@(ReferencePath->'$(_ManifestsDir)%(FileName).manifest')" Condition="'%(ReferencePath.IsSystemReference)' != 'true' And '%(ReferencePath.WinMDFile)' == 'true' And '%(ReferencePath.ReferenceSourceTarget)' == 'ResolveAssemblyReference' And '%(ReferencePath.Implementation)' != '' And '%(FileName)' != 'Microsoft.Web.WebView2.Core'">
        <WinMDPath>%(ReferencePath.FullPath)</WinMDPath>
        <Implementation>$([System.IO.Path]::GetFileName('%(ReferencePath.Implementation)'))</Implementation>
      </_UnpackagedWin32WinmdManifest>
      <!-- 为引用的项目生成的 winmd 生成清单文件 -->
      <_UnpackagedWin32WinmdProjectReference Condition="'%(_ResolvedNativeProjectReferencePaths.ProjectType)' != 'StaticLibrary' And '%(_ResolvedNativeProjectReferencePaths.DeploymentContent)' != 'false'" Include="@(_ResolvedNativeProjectReferencePaths-&gt;WithMetadataValue('FileType','winmd')-&gt;'%(RootDir)%(Directory)%(TargetPath)')" />
      <FileReads Include="@(_UnpackagedWin32WinmdProjectReference)" />
      <_UnpackagedWin32WinmdManifest Include="@(_UnpackagedWin32WinmdProjectReference->'$(_ManifestsDir)%(FileName).manifest')">
        <WinMDPath>%(Identity)</WinMDPath>
      </_UnpackagedWin32WinmdManifest>
    </ItemGroup>
  </Target>
  <Target Name="UnpackagedWin32GenerateAdditionalWinmdManifests" Condition="!$(IsPackaged)" Inputs="@(UnpackagedWin32WinmdManifest.WinMDPath)" Outputs="@(_UnpackagedWin32WinmdManifest)" BeforeTargets="Link" DependsOnTargets="UnpackagedWin32MapWinmdsToManifestFiles">
    <Message Text="Generating manifest for %(_UnpackagedWin32WinmdManifest.WinMDPath)" Importance="High" />
    <MakeDir Directories="$(_ManifestsDir)" />
    <!-- 并行处理 _UnpackagedWin32WinmdManifest 中的每一个元素 -->
    <Exec Command="mt.exe -nologo -winmd:&quot;%(_UnpackagedWin32WinmdManifest.WinMDPath)&quot; -dll:%(_UnpackagedWin32WinmdManifest.Implementation) -out:&quot;%(_UnpackagedWin32WinmdManifest.Identity)&quot;" />
    <ItemGroup>
      <Manifest Include="@(_UnpackagedWin32WinmdManifest)" />
    </ItemGroup>
  </Target>
  <ImportGroup Label="ExtensionTargets">
    <Import Project="..\..\packages\Microsoft.UI.Xaml.2.8.6\build\native\Microsoft.UI.Xaml.targets" Condition="Exists('..\..\packages\Microsoft.UI.Xaml.2.8.6\build\native\Microsoft.UI.Xaml.targets')" />
    <Import Project="..\..\packages\Microsoft.Web.WebView2.1.0.2420.47\build\native\Microsoft.Web.WebView2.targets" Condition="Exists('..\..\packages\Microsoft.Web.WebView2.1.0.2420.47\build\native\Microsoft.Web.WebView2.targets')" />
    <Import Project="..\..\packages\Microsoft.Windows.CppWinRT.2.0.240405.15\build\native\Microsoft.Windows.CppWinRT.targets" Condition="Exists('..\..\packages\Microsoft.Windows.CppWinRT.2.0.240405.15\build\native\Microsoft.Windows.CppWinRT.targets')" />
  </ImportGroup>
  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ErrorText>这台计算机上缺少此项目引用的 NuGet 程序包。使用“NuGet 程序包还原”可下载这些程序包。有关更多信息，请参见 http://go.microsoft.com/fwlink/?LinkID=322105。缺少的文件是 {0}。</ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('..\..\packages\Microsoft.UI.Xaml.2.8.6\build\native\Microsoft.UI.Xaml.props')" Text="$([System.String]::Format('$(ErrorText)', '..\..\packages\Microsoft.UI.Xaml.2.8.6\build\native\Microsoft.UI.Xaml.props'))" />
    <Error Condition="!Exists('..\..\packages\Microsoft.UI.Xaml.2.8.6\build\native\Microsoft.UI.Xaml.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\..\packages\Microsoft.UI.Xaml.2.8.6\build\native\Microsoft.UI.Xaml.targets'))" />
    <Error Condition="!Exists('..\..\packages\Microsoft.Web.WebView2.1.0.2420.47\build\native\Microsoft.Web.WebView2.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\..\packages\Microsoft.Web.WebView2.1.0.2420.47\build\native\Microsoft.Web.WebView2.targets'))" />
    <Error Condition="!Exists('..\..\packages\Microsoft.Windows.CppWinRT.2.0.240405.15\build\native\Microsoft.Windows.CppWinRT.props')" Text="$([System.String]::Format('$(ErrorText)', '..\..\packages\Microsoft.Windows.CppWinRT.2.0.240405.15\build\native\Microsoft.Windows.CppWinRT.props'))" />
    <Error Condition="!Exists('..\..\packages\Microsoft.Windows.CppWinRT.2.0.240405.15\build\native\Microsoft.Windows.CppWinRT.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\..\packages\Microsoft.Windows.CppWinRT.2.0.240405.15\build\native\Microsoft.Windows.CppWinRT.targets'))" />
  </Target>
</Project>